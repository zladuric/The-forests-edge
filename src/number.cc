#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <syslog.h>
#include <complex>
#include "define.h"
#include "struct.h"


using namespace std;
typedef complex<double> double_complex;

static int            evaluate     ( const char *, bool&, int, int, int, int ); 
static double_complex fevaluate    ( const char *, bool&, double = 0.0, double = 0.0 );
static double_complex fevaluate    ( const char *, bool&, double, double, int, int ); 


// Cumulative normal distribution from 0.001 through 3.100 in steps of 0.001.
static const unsigned phi_values [] = {
  500398942, 500797884, 501196825, 501595765, 501994703, 502393639, 502792573, 503191504, 503590432, 503989356,
  504388277, 504787192, 505186104, 505585009, 505983910, 506382804, 506781692, 507180573, 507579447, 507978314,
  508377172, 508776022, 509174864, 509573696, 509972518, 510371331, 510770133, 511168924, 511567705, 511966473,
  512365230, 512763975, 513162706, 513561425, 513960130, 514358821, 514757497, 515156159, 515554806, 515953437,
  516352052, 516750651, 517149233, 517547798, 517946346, 518344875, 518743386, 519141879, 519540352, 519938806,
  520337240, 520735653, 521134046, 521532418, 521930768, 522329096, 522727402, 523125686, 523523946, 523922183,
  524320395, 524718584, 525116748, 525514887, 525913000, 526311087, 526709148, 527107183, 527505190, 527903170,
  528301122, 528699046, 529096941, 529494807, 529892644, 530290451, 530688228, 531085974, 531483688, 531881372,
  532279024, 532676643, 533074230, 533471784, 533869305, 534266791, 534664244, 535061662, 535459045, 535856393,
  536253704, 536650980, 537048219, 537445422, 537842587, 538239714, 538636803, 539033853, 539430865, 539827837,
  540224770, 540621662, 541018515, 541415326, 541812096, 542208824, 542605510, 543002154, 543398755, 543795313,
  544191827, 544588297, 544984722, 545381103, 545777439, 546173729, 546569973, 546966171, 547362322, 547758426,
  548154482, 548550491, 548946451, 549342362, 549738225, 550134038, 550529801, 550925513, 551321176, 551716787,
  552112346, 552507854, 552903310, 553298713, 553694063, 554089360, 554484602, 554879791, 555274925, 555670005,
  556065029, 556459997, 556854909, 557249765, 557644564, 558039306, 558433990, 558828616, 559223184, 559617692,
  560012142, 560406532, 560800862, 561195132, 561589341, 561983489, 562377576, 562771601, 563165563, 563559463,
  563953300, 564347073, 564740783, 565134428, 565528009, 565921525, 566314976, 566708360, 567101679, 567494932,
  567888117, 568281236, 568674286, 569067269, 569460183, 569853029, 570245805, 570638512, 571031149, 571423716,
  571816212, 572208637, 572600991, 572993273, 573385482, 573777619, 574169684, 574561674, 574953592, 575345435,
  575737203, 576128897, 576520516, 576912059, 577303526, 577694917, 578086231, 578477468, 578868628, 579259709,
  579650713, 580041638, 580432484, 580823251, 581213938, 581604544, 581995071, 582385516, 582775881, 583166164,
  583556364, 583946483, 584336519, 584726471, 585116341, 585506126, 585895828, 586285444, 586674976, 587064423,
  587453784, 587843058, 588232247, 588621348, 589010363, 589399290, 589788129, 590176880, 590565542, 590954115,
  591342599, 591730993, 592119297, 592507511, 592895633, 593283665, 593671605, 594059453, 594447209, 594834872,
  595222442, 595609918, 595997301, 596384590, 596771784, 597158884, 597545888, 597932797, 598319609, 598706326,
  599092945, 599479468, 599865893, 600252221, 600638450, 601024581, 601410613, 601796546, 602182380, 602568113,
  602953746, 603339279, 603724710, 604110041, 604495269, 604880396, 605265419, 605650341, 606035159, 606419873,
  606804484, 607188990, 607573392, 607957689, 608341881, 608725967, 609109947, 609493821, 609877588, 610261248,
  610644800, 611028245, 611411582, 611794810, 612177929, 612560939, 612943840, 613326631, 613709311, 614091881,
  614474340, 614856688, 615238924, 615621048, 616003060, 616384959, 616766745, 617148418, 617529977, 617911422,
  618292753, 618673969, 619055069, 619436054, 619816924, 620197677, 620578314, 620958834, 621339237, 621719522,
  622099689, 622479738, 622859669, 623239481, 623619173, 623998746, 624378199, 624757532, 625136744, 625515835,
  625894805, 626273653, 626652379, 627030983, 627409464, 627787822, 628166057, 628544169, 628922156, 629300019,
  629677757, 630055371, 630432858, 630810221, 631187457, 631564567, 631941550, 632318406, 632695135, 633071736,
  633448209, 633824554, 634200770, 634576857, 634952815, 635328643, 635704341, 636079908, 636455345, 636830651,
  637205826, 637580869, 637955780, 638330558, 638705204, 639079717, 639454097, 639828343, 640202455, 640576433,
  640950277, 641323985, 641697558, 642070995, 642444297, 642817462, 643190491, 643563383, 643936138, 644308755,
  644681234, 645053575, 645425778, 645797842, 646169767, 646541552, 646913198, 647284703, 647656068, 648027292,
  648398376, 648769318, 649140118, 649510776, 649881292, 650251666, 650621896, 650991983, 651361927, 651731727,
  652101382, 652470893, 652840259, 653209480, 653578556, 653947486, 654316270, 654684907, 655053398, 655421742,
  655789938, 656157987, 656525888, 656893640, 657261245, 657628700, 657996006, 658363163, 658730169, 659097026,
  659463733, 659830288, 660196693, 660562947, 660929048, 661294998, 661660796, 662026441, 662391934, 662757273,
  663122459, 663487491, 663852370, 664217093, 664581663, 664946077, 665310336, 665674440, 666038388, 666402179,
  666765815, 667129293, 667492615, 667855780, 668218786, 668581635, 668944326, 669306858, 669669232, 670031446,
  670393502, 670755397, 671117133, 671478708, 671840123, 672201377, 672562470, 672923402, 673284172, 673644780,
  674005226, 674365509, 674725629, 675085587, 675445381, 675805011, 676164477, 676523779, 676882917, 677241890,
  677600698, 677959340, 678317817, 678676127, 679034272, 679392250, 679750061, 680107705, 680465182, 680822491,
  681179633, 681536606, 681893410, 682250046, 682606513, 682962811, 683318939, 683674898, 684030686, 684386304,
  684741751, 685097027, 685452132, 685807065, 686161827, 686516417, 686870835, 687225080, 687579152, 687933051,
  688286776, 688640328, 688993706, 689346910, 689699940, 690052795, 690405474, 690757979, 691110308, 691462461,
  691814439, 692166240, 692517864, 692869312, 693220582, 693571675, 693922591, 694273328, 694623888, 694974269,
  695324472, 695674495, 696024340, 696374005, 696723490, 697072795, 697421921, 697770865, 698119629, 698468213,
  698816614, 699164835, 699512873, 699860730, 700208405, 700555897, 700903206, 701250332, 701597275, 701944035,
  702290610, 702637002, 702983210, 703329233, 703675071, 704020725, 704366193, 704711476, 705056573, 705401484,
  705746209, 706090747, 706435099, 706779264, 707123241, 707467031, 707810634, 708154049, 708497275, 708840313,
  709183163, 709525823, 709868295, 710210577, 710552670, 710894573, 711236285, 711577808, 711919140, 712260281,
  712601231, 712941991, 713282558, 713622934, 713963118, 714303110, 714642909, 714982516, 715321930, 715661151,
  716000179, 716339013, 716677653, 717016099, 717354352, 717692409, 718030272, 718367940, 718705413, 719042691,
  719379773, 719716660, 720053350, 720389844, 720726142, 721062243, 721398147, 721733854, 722069363, 722404675,
  722739790, 723074706, 723409424, 723743944, 724078265, 724412387, 724746310, 725080034, 725413558, 725746882,
  726080007, 726412931, 726745655, 727078179, 727410502, 727742623, 728074544, 728406263, 728737781, 729069096,
  729400210, 729731121, 730061830, 730392336, 730722640, 731052740, 731382637, 731712331, 732041821, 732371107,
  732700188, 733029066, 733357739, 733686208, 734014471, 734342529, 734670382, 734998030, 735325472, 735652708,
  735979738, 736306561, 736633179, 736959589, 737285793, 737611789, 737937578, 738263160, 738588534, 738913700,
  739238659, 739563409, 739887950, 740212283, 740536407, 740860322, 741184028, 741507525, 741830812, 742153889,
  742476757, 742799414, 743121861, 743444097, 743766123, 744087938, 744409542, 744730934, 745052116, 745373085,
  745693843, 746014389, 746334723, 746654845, 746974754, 747294450, 747613933, 747933204, 748252261, 748571105,
  748889735, 749208152, 749526355, 749844343, 750162118, 750479678, 750797023, 751114153, 751431069, 751747770,
  752064255, 752380525, 752696579, 753012417, 753328040, 753643446, 753958636, 754273609, 754588366, 754902906,
  755217230, 755531336, 755845224, 756158896, 756472349, 756785585, 757098603, 757411403, 757723985, 758036348,
  758348492, 758660418, 758972125, 759283613, 759594882, 759905931, 760216761, 760527371, 760837762, 761147932,
  761457882, 761767612, 762077122, 762386410, 762695478, 763004326, 763312952, 763621357, 763929540, 764237502,
  764545243, 764852761, 765160058, 765467133, 765773985, 766080615, 766387022, 766693207, 766999169, 767304908,
  767610424, 767915716, 768220785, 768525631, 768830253, 769134651, 769438825, 769742776, 770046501, 770350003,
  770653280, 770956332, 771259160, 771561763, 771864140, 772166293, 772468220, 772769921, 773071397, 773372648,
  773673672, 773974471, 774275043, 774575389, 774875509, 775175402, 775475069, 775774509, 776073722, 776372708,
  776671466, 776969998, 777268302, 777566379, 777864228, 778161849, 778459242, 778756408, 779053345, 779350054,
  779646534, 779942786, 780238810, 780534604, 780830170, 781125507, 781420615, 781715493, 782010143, 782304562,
  782598753, 782892713, 783186444, 783479945, 783773216, 784066257, 784359067, 784651647, 784943997, 785236116,
  785528004, 785819662, 786111089, 786402284, 786693249, 786983982, 787274484, 787564755, 787854794, 788144601,
  788434177, 788723521, 789012633, 789301513, 789590160, 789878576, 790166759, 790454709, 790742427, 791029912,
  791317165, 791604184, 791890971, 792177525, 792463845, 792749932, 793035786, 793321406, 793606793, 793891946,
  794176866, 794461552, 794746003, 795030221, 795314205, 795597954, 795881469, 796164750, 796447796, 796730608,
  797013185, 797295528, 797577635, 797859508, 798141146, 798422549, 798703716, 798984648, 799265345, 799545807,
  799826033, 800106023, 800385778, 800665297, 800944581, 801223628, 801502439, 801781015, 802059354, 802337457,
  802615324, 802892954, 803170348, 803447505, 803724426, 804001110, 804277558, 804553768, 804829742, 805105479,
  805380979, 805656241, 805931267, 806206055, 806480606, 806754919, 807028995, 807302834, 807576435, 807849798,
  808122924, 808395811, 808668461, 808940873, 809213047, 809484983, 809756681, 810028141, 810299362, 810570345,
  810841090, 811111596, 811381864, 811651894, 811921684, 812191236, 812460550, 812729624, 812998460, 813267057,
  813535415, 813803534, 814071414, 814339055, 814606456, 814873618, 815140542, 815407225, 815673670, 815939875,
  816205840, 816471566, 816737053, 817002299, 817267307, 817532074, 817796601, 818060889, 818324937, 818588745,
  818852313, 819115641, 819378729, 819641577, 819904185, 820166553, 820428680, 820690567, 820952214, 821213621,
  821474787, 821735712, 821996398, 822256842, 822517046, 822777010, 823036733, 823296215, 823555457, 823814458,
  824073218, 824331737, 824590016, 824848054, 825105850, 825363406, 825620721, 825877795, 826134628, 826391220,
  826647571, 826903680, 827159549, 827415176, 827670562, 827925707, 828180611, 828435273, 828689694, 828943874,
  829197812, 829451509, 829704965, 829958179, 830211152, 830463883, 830716373, 830968621, 831220628, 831472393,
  831723916, 831975198, 832226239, 832477037, 832727594, 832977910, 833227983, 833477815, 833727406, 833976754,
  834225861, 834474726, 834723349, 834971731, 835219870, 835467768, 835715424, 835962838, 836210010, 836456941,
  836703629, 836950076, 837196281, 837442244, 837687965, 837933444, 838178681, 838423676, 838668429, 838912941,
  839157210, 839401238, 839645023, 839888567, 840131868, 840374928, 840617745, 840860321, 841102655, 841344746,
  841586596, 841828204, 842069569, 842310693, 842551575, 842792215, 843032613, 843272769, 843512683, 843752355,
  843991785, 844230973, 844469920, 844708624, 844947086, 845185307, 845423285, 845661022, 845898517, 846135770,
  846372781, 846609550, 846846077, 847082363, 847318406, 847554208, 847789768, 848025086, 848260163, 848494997,
  848729590, 848963941, 849198051, 849431918, 849665544, 849898929, 850132072, 850364973, 850597632, 850830050,
  851062226, 851294161, 851525854, 851757305, 851988515, 852219484, 852450211, 852680697, 852910941, 853140944,
  853370705, 853600225, 853829504, 854058542, 854287338, 854515893, 854744206, 854972279, 855200110, 855427700,
  855655049, 855882157, 856109024, 856335650, 856562035, 856788179, 857014082, 857239744, 857465165, 857690346,
  857915285, 858139984, 858364442, 858588659, 858812636, 859036372, 859259867, 859483122, 859706136, 859928910,
  860151443, 860373736, 860595789, 860817601, 861039172, 861260504, 861481595, 861702446, 861923057, 862143428,
  862363559, 862583449, 862803100, 863022511, 863241682, 863460613, 863679304, 863897755, 864115967, 864333939,
  864551671, 864769164, 864986418, 865203431, 865420206, 865636740, 865853036, 866069092, 866284909, 866500487,
  866715825, 866930925, 867145785, 867360407, 867574789, 867788933, 868002837, 868216503, 868429931, 868643119,
  868856069, 869068780, 869281253, 869493487, 869705483, 869917240, 870128760, 870340041, 870551083, 870761888,
  870972454, 871182783, 871392873, 871602726, 871812341, 872021718, 872230857, 872439759, 872648423, 872856850,
  873065039, 873272990, 873480705, 873688182, 873895421, 874102424, 874309190, 874515718, 874722010, 874928064,
  875133882, 875339463, 875544808, 875749916, 875954787, 876159422, 876363820, 876567982, 876771908, 876975597,
  877179050, 877382268, 877585249, 877787994, 877990504, 878192777, 878394815, 878596618, 878798184, 878999516,
  879200612, 879401472, 879602097, 879802487, 880002642, 880202562, 880402247, 880601697, 880800912, 880999893,
  881198638, 881397150, 881595426, 881793469, 881991277, 882188850, 882386190, 882583295, 882780167, 882976804,
  883173208, 883369377, 883565314, 883761016, 883956485, 884151721, 884346723, 884541492, 884736027, 884930330,
  885124399, 885318236, 885511840, 885705211, 885898349, 886091255, 886283928, 886476369, 886668577, 886860554,
  887052298, 887243810, 887435090, 887626138, 887816954, 888007539, 888197892, 888388014, 888577904, 888767563,
  888956990, 889146187, 889335152, 889523886, 889712390, 889900663, 890088705, 890276516, 890464097, 890651448,
  890838568, 891025458, 891212118, 891398548, 891584748, 891770718, 891956459, 892141970, 892327251, 892512303,
  892697126, 892881719, 893066083, 893250219, 893434125, 893617802, 893801251, 893984471, 894167463, 894350226,
  894532761, 894715068, 894897147, 895078997, 895260620, 895442015, 895623182, 895804122, 895984834, 896165319,
  896345577, 896525607, 896705410, 896884987, 897064336, 897243459, 897422355, 897601025, 897779468, 897957685,
  898135676, 898313440, 898490979, 898668292, 898845379, 899022241, 899198876, 899375287, 899551472, 899727432,
  899903167, 900078677, 900253962, 900429022, 900603858, 900778469, 900952856, 901127018, 901300957, 901474671,
  901648161, 901821428, 901994471, 902167290, 902339885, 902512258, 902684407, 902856333, 903028035, 903199515,
  903370773, 903541807, 903712619, 903883209, 904053576, 904223721, 904393644, 904563345, 904732825, 904902082,
  905071118, 905239933, 905408526, 905576898, 905745049, 905912979, 906080688, 906248176, 906415444, 906582491,
  906749318, 906915925, 907082311, 907248478, 907414424, 907580151, 907745659, 907910947, 908076015, 908240864,
  908405495, 908569906, 908734098, 908898072, 909061827, 909225363, 909388682, 909551782, 909714664, 909877328,
  910039774, 910202002, 910364013, 910525807, 910687383, 910848742, 911009884, 911170809, 911331517, 911492009,
  911652284, 911812342, 911972185, 912131811, 912291222, 912450416, 912609395, 912768158, 912926706, 913085038,
  913243155, 913401058, 913558745, 913716217, 913873475, 914030518, 914187347, 914343962, 914500363, 914656549,
  914812522, 914968281, 915123827, 915279159, 915434278, 915589183, 915743876, 915898356, 916052623, 916206678,
  916360520, 916514150, 916667567, 916820773, 916973766, 917126548, 917279119, 917431478, 917583625, 917735561,
  917887287, 918038801, 918190105, 918341198, 918492080, 918642752, 918793215, 918943466, 919093509, 919243341,
  919392964, 919542377, 919691581, 919840575, 919989361, 920137938, 920286306, 920434465, 920582416, 920730159,
  920877693, 921025019, 921172138, 921319049, 921465752, 921612248, 921758536, 921904618, 922050492, 922196160,
  922341620, 922486875, 922631922, 922776764, 922921400, 923065829, 923210053, 923354071, 923497883, 923641491,
  923784893, 923928089, 924071081, 924213869, 924356451, 924498829, 924641003, 924782973, 924924739, 925066301,
  925207659, 925348813, 925489764, 925630512, 925771057, 925911399, 926051538, 926191475, 926331209, 926470740,
  926610070, 926749197, 926888123, 927026847, 927165369, 927303690, 927441810, 927579729, 927717446, 927854963,
  927992279, 928129395, 928266311, 928403026, 928539541, 928675857, 928811972, 928947889, 929083605, 929219123,
  929354442, 929489561, 929624482, 929759204, 929893728, 930028054, 930162181, 930296111, 930429843, 930563377,
  930696713, 930829853, 930962795, 931095540, 931228088, 931360440, 931492595, 931624553, 931756316, 931887882,
  932019253, 932150427, 932281407, 932412190, 932542779, 932673172, 932803371, 932933375, 933063184, 933192799,
  933322219, 933451446, 933580478, 933709317, 933837962, 933966413, 934094671, 934222737, 934350609, 934478288,
  934605775, 934733069, 934860171, 934987080, 935113798, 935240324, 935366658, 935492801, 935618752, 935744512,
  935870081, 935995460, 936120647, 936245644, 936370451, 936495068, 936619494, 936743731, 936867778, 936991636,
  937115304, 937238783, 937362073, 937485174, 937608086, 937730810, 937853345, 937975693, 938097852, 938219823,
  938341607, 938463203, 938584612, 938705834, 938826868, 938947716, 939068377, 939188852, 939309140, 939429242,
  939549158, 939668888, 939788433, 939907792, 940026965, 940145954, 940264757, 940383376, 940501810, 940620059,
  940738125, 940856006, 940973703, 941091216, 941208545, 941325691, 941442654, 941559434, 941676031, 941792444,
  941908676, 942024724, 942140591, 942256275, 942371778, 942487098, 942602238, 942717195, 942831972, 942946567,
  943060981, 943175215, 943289268, 943403141, 943516833, 943630345, 943743678, 943856830, 943969804, 944082598,
  944195212, 944307648, 944419905, 944531983, 944643882, 944755603, 944867146, 944978512, 945089699, 945200708,
  945311540, 945422195, 945532673, 945642974, 945753098, 945863045, 945972816, 946082411, 946191829, 946301072,
  946410139, 946519030, 946627746, 946736287, 946844653, 946952843, 947060860, 947168701, 947276369, 947383862,
  947491181, 947598326, 947705298, 947812096, 947918721, 948025172, 948131451, 948237557, 948343491, 948449252,
  948554840, 948660257, 948765502, 948870575, 948975476, 949080206, 949184765, 949289153, 949393370, 949497417,
  949601292, 949704998, 949808533, 949911899, 950015095, 950118121, 950220977, 950323664, 950426183, 950528532,
  950630713, 950732725, 950834568, 950936244, 951037751, 951139091, 951240263, 951341267, 951442104, 951542774,
  951643277, 951743613, 951843782, 951943785, 952043622, 952143293, 952242798, 952342137, 952441310, 952540318,
  952639161, 952737839, 952836352, 952934700, 953032884, 953130904, 953228759, 953326451, 953423978, 953521342,
  953618543, 953715580, 953812454, 953909166, 954005714, 954102100, 954198324, 954294386, 954390285, 954486023,
  954581599, 954677013, 954772266, 954867359, 954962290, 955057060, 955151670, 955246119, 955340408, 955434537,
  955528506, 955622316, 955715966, 955809456, 955902788, 955995960, 956088974, 956181829, 956274525, 956367064,
  956459444, 956551666, 956643730, 956735637, 956827387, 956918979, 957010414, 957101692, 957192814, 957283779,
  957374588, 957465241, 957555738, 957646078, 957736264, 957826294, 957916168, 958005888, 958095453, 958184862,
  958274118, 958363219, 958452166, 958540958, 958629597, 958718083, 958806415, 958894593, 958982619, 959070491,
  959158211, 959245778, 959333193, 959420455, 959507566, 959594524, 959681331, 959767986, 959854490, 959940843,
  960027045, 960113096, 960198997, 960284746, 960370346, 960455796, 960541095, 960626245, 960711246, 960796097,
  960880799, 960965351, 961049755, 961134010, 961218117, 961302076, 961385886, 961469548, 961553063, 961636430,
  961719649, 961802721, 961885647, 961968425, 962051056, 962133541, 962215880, 962298073, 962380119, 962462020,
  962543775, 962625384, 962706848, 962788167, 962869342, 962950371, 963031256, 963111996, 963192592, 963273044,
  963353353, 963433517, 963513538, 963593416, 963673150, 963752742, 963832190, 963911496, 963990660, 964069681,
  964148560, 964227297, 964305893, 964384347, 964462659, 964540830, 964618860, 964696750, 964774498, 964852106,
  964929574, 965006902, 965084089, 965161137, 965238045, 965314814, 965391443, 965467934, 965544285, 965620498,
  965696572, 965772507, 965848305, 965923964, 965999485, 966074869, 966150115, 966225224, 966300196, 966375031,
  966449729, 966524290, 966598715, 966673003, 966747155, 966821172, 966895052, 966968797, 967042407, 967115881,
  967189221, 967262425, 967335495, 967408430, 967481231, 967553897, 967626430, 967698829, 967771094, 967843225,
  967915223, 967987089, 968058821, 968130420, 968201887, 968273221, 968344423, 968415493, 968486431, 968557237,
  968627912, 968698455, 968768867, 968839148, 968909298, 968979317, 969049206, 969118965, 969188593, 969258091,
  969327460, 969396698, 969465808, 969534787, 969603638, 969672360, 969740953, 969809417, 969877753, 969945961,
  970014041, 970081992, 970149816, 970217512, 970285081, 970352523, 970419837, 970487025, 970554086, 970621020,
  970687828, 970754510, 970821065, 970887495, 970953799, 971019978, 971086031, 971151959, 971217762, 971283440,
  971348994, 971414423, 971479727, 971544908, 971609964, 971674897, 971739706, 971804392, 971868954, 971933393,
  971997710, 972061903, 972125974, 972189922, 972253748, 972317452, 972381034, 972444494, 972507833, 972571050,
  972634146, 972697121, 972759975, 972822708, 972885321, 972947813, 973010185, 973072437, 973134569, 973196581,
  973258474, 973320247, 973381901, 973443436, 973504852, 973566150, 973627328, 973688389, 973749331, 973810155,
  973870861, 973931450, 973991921, 974052274, 974112511, 974172630, 974232633, 974292518, 974352288, 974411941,
  974471477, 974530898, 974590202, 974649391, 974708465, 974767423, 974826266, 974884994, 974943607, 975002105,
  975060489, 975118758, 975176913, 975234954, 975292881, 975350695, 975408395, 975465981, 975523454, 975580815,
  975638062, 975695197, 975752219, 975809129, 975865926, 975922611, 975979185, 976035647, 976091997, 976148236,
  976204363, 976260380, 976316285, 976372080, 976427764, 976483338, 976538802, 976594155, 976649399, 976704532,
  976759556, 976814471, 976869276, 976923973, 976978560, 977033039, 977087409, 977141670, 977195823, 977249868,
  977303805, 977357634, 977411356, 977464970, 977518477, 977571876, 977625169, 977678354, 977731433, 977784406,
  977837272, 977890032, 977942685, 977995233, 978047675, 978100012, 978152243, 978204369, 978256390, 978308306,
  978360117, 978411824, 978463426, 978514924, 978566318, 978617608, 978668794, 978719876, 978770855, 978821730,
  978872503, 978923172, 978973739, 979024202, 979074564, 979124822, 979174979, 979225034, 979274986, 979324837,
  979374586, 979424234, 979473781, 979523226, 979572571, 979621815, 979670958, 979720000, 979768943, 979817785,
  979866527, 979915169, 979963711, 980012154, 980060498, 980108742, 980156887, 980204933, 980252881, 980300730,
  980348480, 980396132, 980443686, 980491142, 980538500, 980585760, 980632923, 980679988, 980726957, 980773828,
  980820602, 980867279, 980913860, 980960345, 981006733, 981053025, 981099220, 981145320, 981191325, 981237234,
  981283047, 981328765, 981374388, 981419916, 981465350, 981510689, 981555933, 981601083, 981646138, 981691100,
  981735968, 981780742, 981825423, 981870010, 981914504, 981958905, 982003212, 982047427, 982091550, 982135579,
  982179517, 982223362, 982267115, 982310777, 982354346, 982397824, 982441210, 982484505, 982527709, 982570822,
  982613844, 982656775, 982699616, 982742366, 982785026, 982827596, 982870076, 982912466, 982954767, 982996977,
  983039099, 983081131, 983123074, 983164928, 983206694, 983248370, 983289958, 983331458, 983372870, 983414193,
  983455429, 983496577, 983537637, 983578610, 983619495, 983660293, 983701004, 983741628, 983782166, 983822617,
  983862981, 983903259, 983943451, 983983557, 984023577, 984063511, 984103359, 984143122, 984182800, 984222393,
  984261900, 984301323, 984340661, 984379914, 984419083, 984458167, 984497168, 984536084, 984574917, 984613665,
  984652330, 984690912, 984729410, 984767825, 984806157, 984844407, 984882573, 984920657, 984958658, 984996577,
  985034414, 985072169, 985109841, 985147432, 985184942, 985222370, 985259716, 985296982, 985334166, 985371269,
  985408292, 985445234, 985482095, 985518876, 985555577, 985592197, 985628738, 985665199, 985701580, 985737882,
  985774104, 985810247, 985846310, 985882295, 985918201, 985954028, 985989777, 986025447, 986061039, 986096553,
  986131988, 986167346, 986202626, 986237828, 986272953, 986308000, 986342970, 986377863, 986412680, 986447419,
  986482081, 986516668, 986551177, 986585611, 986619968, 986654249, 986688454, 986722584, 986756638, 986790616,
  986824519, 986858347, 986892100, 986925778, 986959381, 986992909, 987026363, 987059743, 987093048, 987126279,
  987159436, 987192519, 987225528, 987258463, 987291326, 987324114, 987356830, 987389472, 987422042, 987454539,
  987486963, 987519314, 987551593, 987583799, 987615934, 987647996, 987679986, 987711905, 987743752, 987775527,
  987807231, 987838864, 987870426, 987901916, 987933336, 987964684, 987995963, 988027170, 988058308, 988089375,
  988120371, 988151298, 988182155, 988212943, 988243660, 988274308, 988304887, 988335397, 988365837, 988396209,
  988426511, 988456745, 988486910, 988517007, 988547035, 988576995, 988606887, 988636711, 988666467, 988696156,
  988725777, 988755330, 988784816, 988814235, 988843586, 988872871, 988902088, 988931239, 988960324, 988989342,
  989018293, 989047178, 989075998, 989104751, 989133438, 989162059, 989190615, 989219105, 989247530, 989275890,
  989304184, 989332414, 989360578, 989388678, 989416713, 989444684, 989472590, 989500432, 989528209, 989555923,
  989583573, 989611158, 989638680, 989666139, 989693534, 989720866, 989748134, 989775339, 989802482, 989829561,
  989856578, 989883532, 989910424, 989937253, 989964020, 989990725, 990017367, 990043948, 990070467, 990096924,
  990123320, 990149654, 990175927, 990202139, 990228290, 990254379, 990280408, 990306376, 990332283, 990358130,
  990383916, 990409643, 990435308, 990460914, 990486460, 990511946, 990537373, 990562739, 990588047, 990613294,
  990638483, 990663613, 990688683, 990713694, 990738647, 990763541, 990788377, 990813154, 990837872, 990862532,
  990887135, 990911679, 990936165, 990960594, 990984965, 991009278, 991033534, 991057732, 991081873, 991105957,
  991129984, 991153955, 991177868, 991201725, 991225525, 991249269, 991272956, 991296587, 991320162, 991343681,
  991367144, 991390551, 991413903, 991437199, 991460439, 991483624, 991506754, 991529829, 991552849, 991575814,
  991598724, 991621579, 991644379, 991667126, 991689817, 991712455, 991735038, 991757567, 991780043, 991802464,
  991824832, 991847146, 991869406, 991891613, 991913767, 991935868, 991957915, 991979910, 992001851, 992023740,
  992045576, 992067359, 992089090, 992110769, 992132395, 992153969, 992175491, 992196962, 992218380, 992239746,
  992261061, 992282325, 992303537, 992324697, 992345807, 992366865, 992387872, 992408828, 992429734, 992450589,
  992471393, 992492146, 992512850, 992533502, 992554105, 992574658, 992595160, 992615613, 992636016, 992656369,
  992676673, 992696927, 992717131, 992737287, 992757393, 992777450, 992797458, 992817417, 992837328, 992857189,
  992877002, 992896767, 992916483, 992936151, 992955771, 992975342, 992994866, 993014341, 993033769, 993053149,
  993072482, 993091767, 993111004, 993130194, 993149337, 993168433, 993187482, 993206484, 993225439, 993244347,
  993263209, 993282024, 993300793, 993319515, 993338191, 993356821, 993375405, 993393943, 993412435, 993430881,
  993449281, 993467636, 993485946, 993504210, 993522428, 993540602, 993558730, 993576813, 993594852, 993612845,
  993630794, 993648698, 993666558, 993684373, 993702144, 993719870, 993737552, 993755190, 993772784, 993790335,
  993807841, 993825304, 993842723, 993860098, 993877430, 993894719, 993911964, 993929167, 993946326, 993963442,
  993980515, 993997546, 994014533, 994031478, 994048381, 994065241, 994082059, 994098834, 994115567, 994132258,
  994148907, 994165515, 994182080, 994198604, 994215086, 994231526, 994247925, 994264282, 994280599, 994296874,
  994313108, 994329300, 994345452, 994361563, 994377634, 994393663, 994409652, 994425601, 994441509, 994457377,
  994473204, 994488991, 994504739, 994520446, 994536113, 994551741, 994567328, 994582876, 994598385, 994613854,
  994629284, 994644674, 994660025, 994675337, 994690610, 994705844, 994721039, 994736195, 994751313, 994766392,
  994781432, 994796434, 994811398, 994826323, 994841210, 994856059, 994870869, 994885642, 994900377, 994915074,
  994929734, 994944355, 994958940, 994973486, 994987996, 995002468, 995016902, 995031300, 995045661, 995059984,
  995074271, 995088521, 995102734, 995116910, 995131050, 995145153, 995159220, 995173251, 995187245, 995201203,
  995215125, 995229011, 995242861, 995256676, 995270454, 995284197, 995297904, 995311575, 995325211, 995338812,
  995352377, 995365907, 995379402, 995392862, 995406287, 995419677, 995433032, 995446352, 995459638, 995472889,
  995486105, 995499287, 995512435, 995525548, 995538627, 995551672, 995564683, 995577660, 995590603, 995603512,
  995616387, 995629228, 995642036, 995654811, 995667552, 995680259, 995692933, 995705574, 995718182, 995730757,
  995743298, 995755807, 995768283, 995780726, 995793136, 995805513, 995817858, 995830171, 995842451, 995854699,
  995866914, 995879097, 995891248, 995903367, 995915454, 995927509, 995939532, 995951524, 995963483, 995975411,
  995987308, 995999173, 996011006, 996022809, 996034580, 996046319, 996058028, 996069705, 996081352, 996092967,
  996104552, 996116106, 996127629, 996139122, 996150584, 996162015, 996173416, 996184787, 996196127, 996207438,
  996218718, 996229968, 996241187, 996252377, 996263538, 996274668, 996285768, 996296839, 996307880, 996318892,
  996329874, 996340827, 996351750, 996362645, 996373510, 996384346, 996395152, 996405930, 996416679, 996427399,
  996438090, 996448753, 996459387, 996469992, 996480568, 996491117, 996501636, 996512128, 996522591, 996533026,
  996543433, 996553812, 996564163, 996574486, 996584781, 996595048, 996605287, 996615499, 996625683, 996635840,
  996645969, 996656070, 996666145, 996676192, 996686211, 996696204, 996706170, 996716108, 996726020, 996735904,
  996745762, 996755593, 996765397, 996775175, 996784926, 996794650, 996804348, 996814020, 996823665, 996833284,
  996842876, 996852443, 996861983, 996871498, 996880986, 996890449, 996899885, 996909296, 996918681, 996928041,
  996937375, 996946683, 996955966, 996965223, 996974455, 996983662, 996992843, 997002000, 997011131, 997020237,
  997029318, 997038374, 997047405, 997056412, 997065393, 997074350, 997083282, 997092190, 997101073, 997109932,
  997118766, 997127576, 997136362, 997145123, 997153860, 997162573, 997171262, 997179927, 997188568, 997197185,
  997205779, 997214348, 997222894, 997231416, 997239915, 997248390, 997256841, 997265269, 997273674, 997282055,
  997290413, 997298748, 997307060, 997315348, 997323614, 997331856, 997340076, 997348273, 997356447, 997364598,
  997372726, 997380832, 997388915, 997396976, 997405014, 997413030, 997421023, 997428994, 997436943, 997444870,
  997452774, 997460656, 997468517, 997476355, 997484171, 997491965, 997499738, 997507489, 997515218, 997522925,
  997530611, 997538275, 997545917, 997553539, 997561138, 997568717, 997576274, 997583810, 997591324, 997598818,
  997606290, 997613741, 997621171, 997628581, 997635969, 997643337, 997650684, 997658010, 997665315, 997672600,
  997679864, 997687108, 997694331, 997701533, 997708716, 997715878, 997723019, 997730141, 997737242, 997744323,
  997751384, 997758425, 997765446, 997772448, 997779429, 997786390, 997793332, 997800254, 997807156, 997814039,
  997820902, 997827745, 997834569, 997841373, 997848159, 997854924, 997861671, 997868398, 997875106, 997881795,
  997888465, 997895115, 997901747, 997908360, 997914954, 997921529, 997928085, 997934622, 997941141, 997947641,
  997954122, 997960585, 997967029, 997973455, 997979863, 997986251, 997992622, 997998974, 998005308, 998011624,
  998017922, 998024201, 998030463, 998036706, 998042932, 998049139, 998055329, 998061501, 998067655, 998073791,
  998079909, 998086010, 998092094, 998098159, 998104207, 998110238, 998116251, 998122247, 998128226, 998134187,
  998140131, 998146057, 998151967, 998157859, 998163735, 998169593, 998175434, 998181258, 998187066, 998192856,
  998198630, 998204387, 998210127, 998215850, 998221557, 998227248, 998232921, 998238578, 998244219, 998249843,
  998255451, 998261042, 998266617, 998272176, 998277719, 998283245, 998288756, 998294250, 998299728, 998305190,
  998310636, 998316066, 998321481, 998326879, 998332262, 998337628, 998342979, 998348315, 998353635, 998358939,
  998364227, 998369500, 998374758, 998380000, 998385227, 998390438, 998395634, 998400815, 998405980, 998411130,
  998416265, 998421385, 998426490, 998431580, 998436655, 998441715, 998446759, 998451789, 998456804, 998461805,
  998466790, 998471761, 998476717, 998481659, 998486585, 998491498, 998496395, 998501278, 998506147, 998511001,
  998515841, 998520667, 998525478, 998530275, 998535057, 998539826, 998544580, 998549320, 998554046, 998558758,
  998563456, 998568140, 998572810, 998577466, 998582108, 998586737, 998591351, 998595952, 998600539, 998605113,
  998609673, 998614219, 998618751, 998623270, 998627776, 998632268, 998636746, 998641212, 998645663, 998650102,
  998654527, 998658939, 998663338, 998667723, 998672096, 998676455, 998680801, 998685134, 998689454, 998693762,
  998698056, 998702337, 998706605, 998710861, 998715104, 998719334, 998723551, 998727755, 998731947, 998736127,
  998740293, 998744447, 998748589, 998752718, 998756834, 998760938, 998765030, 998769110, 998773177, 998777231,
  998781274, 998785304, 998789322, 998793328, 998797322, 998801303, 998805273, 998809230, 998813176, 998817109,
  998821031, 998824941, 998828838, 998832724, 998836598, 998840461, 998844311, 998848150, 998851978, 998855793,
  998859597, 998863389, 998867170, 998870940, 998874697, 998878444, 998882179, 998885902, 998889614, 998893315,
  998897005, 998900683, 998904350, 998908005, 998911650, 998915283, 998918906, 998922517, 998926117, 998929706,
  998933284, 998936851, 998940408, 998943953, 998947487, 998951011, 998954523, 998958025, 998961517, 998964997,
  998968467, 998971926, 998975374, 998978812, 998982239, 998985656, 998989062, 998992458, 998995843, 998999218,
  999002582, 999005936, 999009279, 999012613, 999015936, 999019248, 999022551, 999025843, 999029125, 999032397
};


double phi( double x )
{
  if( x < 0 ) {
    return 1.0 - phi( -x );
  }

  if( x > 3.100 ) {
    bug( "Phi: value %f out of range.", x );
    return 1.0;
  }

  const double n = x / 0.001;
  const unsigned a = (unsigned) n;

  const double a_val = ( a == 0 ) ? 0.5 : ( phi_values[a-1] * 1.0e-9 );
  const double b_val = phi_values[a] * 1.0e-9;

  // Interpolate.
  return a_val + ( b_val - a_val ) * ( n - a );
}


double normal_prob( double x, double expect, double stddev, double left, double right )
{
  if( left >= right ) {
    bug( "Normal_prob: left limit >= right limit." );
  }

  if( x < left || x > right )
    return 0.0;

  //  const double stddev = sqrt( variance );

  const double X = ( x - expect ) / stddev;
  const double LEFT = ( left - expect ) / stddev;
  const double RIGHT = ( right - expect ) / stddev;

  const double left_prob = phi( LEFT );

  return ( phi( X ) - left_prob ) / ( phi( RIGHT ) - left_prob );
}


int norm_search( int x, int expect, int left, unsigned width, unsigned stddev )
{
  double dleft = (double)left;
  double dright = (double)( left + width );

  // Odd width, need to adjust left.
  if( width & 0x1 ) {
    dleft -= 0.5;
  }

  int min = 0;
  int max = width-1;
  int last = -1;
  
  while( true ) {
    if( max < min ) {
      if( last == -1 ) {
	roach( "Bad normal search." );
	roach( "--      x = %d", x );
	roach( "-- expect = %d", expect );
	roach( "--   left = %d", left );
	roach( "--  width = %d", width );
	roach( "-- stddev = %d", stddev );
	panic( "Bad normal search" );
      }
      return last;
    }
    
    const int mid = ( max + min ) / 2;
    const double norm = normal_prob( dleft + mid + 1,
				     (double)expect,
				     (double)stddev,
				     dleft,
				     dright );

    const int value = (int)( norm * width + 0.5 );
				     
    if( value == x+1 ) {
      return mid;
    }
    
    if( value > x ) {
      last = mid;
      max = mid-1;
    } else {
      min = mid+1;
    }
  }
}


/*
// Cululative normal dist, center = 1000, stddev = 250.
static const unsigned phi_table [] = {
      32,     32,     33,     33,     34,     34,     35,     36,     36,     37,
      37,     38,     39,     39,     40,     41,     41,     42,     43,     44,
      44,     45,     46,     47,     47,     48,     49,     50,     51,     51,
      52,     53,     54,     55,     56,     57,     58,     59,     60,     61,
      62,     63,     64,     65,     66,     67,     68,     69,     70,     71,
      72,     74,     75,     76,     77,     78,     80,     81,     82,     84,
      85,     86,     88,     89,     91,     92,     93,     95,     97,     98,
     100,    101,    103,    104,    106,    108,    110,    111,    113,    115,
     117,    118,    120,    122,    124,    126,    128,    130,    132,    134,
     136,    138,    141,    143,    145,    147,    150,    152,    154,    157,
     159,    162,    164,    167,    169,    172,    174,    177,    180,    183,
     185,    188,    191,    194,    197,    200,    203,    206,    209,    213,
     216,    219,    222,    226,    229,    233,    236,    240,    243,    247,
     251,    254,    258,    262,    266,    270,    274,    278,    282,    287,
     291,    295,    300,    304,    309,    313,    318,    322,    327,    332,
     337,    342,    347,    352,    357,    362,    368,    373,    379,    384,
     390,    395,    401,    407,    413,    419,    425,    431,    437,    444,
     450,    457,    463,    470,    477,    483,    490,    497,    505,    512,
     519,    526,    534,    542,    549,    557,    565,    573,    581,    589,
     598,    606,    615,    623,    632,    641,    650,    659,    668,    678,
     687,    697,    706,    716,    726,    736,    747,    757,    767,    778,
     789,    800,    811,    822,    833,    845,    856,    868,    880,    892,
     904,    917,    929,    942,    955,    968,    981,    994,   1008,   1021,
    1035,   1049,   1063,   1077,   1092,   1107,   1122,   1137,   1152,   1167,
    1183,   1199,   1215,   1231,   1247,   1264,   1281,   1298,   1315,   1332,
    1350,   1368,   1386,   1404,   1423,   1441,   1460,   1479,   1499,   1518,
    1538,   1558,   1579,   1599,   1620,   1641,   1662,   1684,   1706,   1728,
    1750,   1773,   1796,   1819,   1842,   1866,   1890,   1914,   1938,   1963,
    1988,   2014,   2039,   2065,   2092,   2118,   2145,   2172,   2200,   2228,
    2256,   2284,   2313,   2342,   2371,   2401,   2431,   2462,   2493,   2524,
    2555,   2587,   2619,   2652,   2685,   2718,   2752,   2786,   2820,   2855,
    2890,   2926,   2962,   2998,   3035,   3072,   3110,   3148,   3186,   3225,
    3264,   3304,   3344,   3385,   3426,   3467,   3509,   3551,   3594,   3637,
    3681,   3725,   3770,   3815,   3861,   3907,   3954,   4001,   4048,   4097,
    4145,   4194,   4244,   4294,   4345,   4396,   4448,   4501,   4554,   4607,
    4661,   4716,   4771,   4827,   4883,   4940,   4998,   5056,   5114,   5174,
    5234,   5294,   5355,   5417,   5480,   5543,   5606,   5671,   5736,   5801,
    5868,   5935,   6002,   6071,   6140,   6210,   6280,   6351,   6423,   6496,
    6569,   6643,   6718,   6794,   6870,   6947,   7025,   7103,   7183,   7263,
    7344,   7425,   7508,   7591,   7675,   7760,   7846,   7933,   8020,   8108,
    8198,   8288,   8378,   8470,   8563,   8656,   8751,   8846,   8942,   9039,
    9137,   9236,   9336,   9437,   9539,   9642,   9746,   9850,   9956,  10063,
   10170,  10279,  10389,  10500,  10611,  10724,  10838,  10953,  11069,  11186,
   11304,  11423,  11543,  11665,  11787,  11911,  12035,  12161,  12288,  12416,
   12545,  12676,  12807,  12940,  13074,  13209,  13346,  13483,  13622,  13762,
   13903,  14046,  14190,  14335,  14481,  14629,  14778,  14928,  15079,  15232,
   15386,  15542,  15699,  15857,  16016,  16177,  16340,  16503,  16669,  16835,
   17003,  17172,  17343,  17515,  17689,  17864,  18041,  18219,  18399,  18580,
   18763,  18947,  19133,  19320,  19509,  19699,  19891,  20085,  20280,  20477,
   20675,  20875,  21077,  21280,  21485,  21692,  21900,  22110,  22322,  22535,
   22750,  22967,  23186,  23406,  23628,  23852,  24077,  24305,  24534,  24765,
   24998,  25233,  25469,  25707,  25948,  26190,  26434,  26680,  26928,  27177,
   27429,  27683,  27938,  28196,  28455,  28717,  28980,  29245,  29513,  29782,
   30054,  30328,  30603,  30881,  31161,  31443,  31727,  32013,  32301,  32592,
   32884,  33179,  33476,  33775,  34076,  34380,  34685,  34993,  35303,  35616,
   35930,  36247,  36566,  36888,  37212,  37538,  37866,  38197,  38530,  38866,
   39204,  39544,  39887,  40232,  40580,  40930,  41282,  41637,  41994,  42354,
   42716,  43081,  43448,  43818,  44191,  44565,  44943,  45323,  45706,  46091,
   46479,  46869,  47262,  47658,  48056,  48457,  48861,  49267,  49676,  50088,
   50503,  50920,  51340,  51762,  52188,  52616,  53047,  53481,  53918,  54357,
   54799,  55244,  55692,  56143,  56597,  57053,  57513,  57975,  58441,  58909,
   59380,  59854,  60331,  60811,  61294,  61780,  62269,  62761,  63256,  63754,
   64255,  64760,  65267,  65777,  66291,  66807,  67327,  67850,  68375,  68904,
   69437,  69972,  70510,  71052,  71597,  72145,  72696,  73251,  73809,  74369,
   74934,  75501,  76072,  76646,  77223,  77804,  78388,  78975,  79566,  80159,
   80757,  81357,  81961,  82569,  83179,  83793,  84411,  85032,  85656,  86284,
   86915,  87550,  88188,  88829,  89474,  90123,  90775,  91430,  92089,  92752,
   93418,  94087,  94760,  95437,  96117,  96800,  97488,  98179,  98873,  99571,
  100273, 100978, 101687, 102399, 103115, 103835, 104558, 105285, 106016, 106750,
  107488, 108229, 108975, 109723, 110476, 111232, 111992, 112756, 113524, 114295,
  115070, 115848, 116631, 117417, 118207, 119000, 119797, 120599, 121403, 122212,
  123024, 123841, 124661, 125484, 126312, 127143, 127978, 128817, 129660, 130507,
  131357, 132211, 133069, 133931, 134797, 135666, 136539, 137417, 138298, 139182,
  140071, 140964, 141860, 142760, 143664, 144572, 145484, 146400, 147319, 148243,
  149170, 150101, 151036, 151975, 152918, 153864, 154815, 155769, 156727, 157689,
  158655, 159625, 160599, 161576, 162558, 163543, 164532, 165525, 166522, 167523,
  168528, 169536, 170548, 171565, 172585, 173609, 174637, 175668, 176704, 177743,
  178786, 179833, 180884, 181939, 182998, 184060, 185126, 186196, 187270, 188348,
  189430, 190515, 191604, 192697, 193794, 194895, 195999, 197107, 198219, 199335,
  200454, 201577, 202704, 203835, 204970, 206108, 207250, 208396, 209545, 210698,
  211855, 213016, 214180, 215348, 216520, 217695, 218874, 220057, 221244, 222434,
  223627, 224825, 226026, 227230, 228438, 229650, 230865, 232084, 233307, 234533,
  235762, 236996, 238232, 239473, 240716, 241964, 243214, 244469, 245726, 246988,
  248252, 249520, 250792, 252067, 253345, 254627, 255912, 257201, 258492, 259788,
  261086, 262388, 263693, 265002, 266314, 267629, 268947, 270269, 271594, 272922,
  274253, 275588, 276925, 278266, 279610, 280957, 282308, 283661, 285017, 286377,
  287740, 289105, 290474, 291846, 293221, 294599, 295979, 297363, 298750, 300139,
  301532, 302927, 304326, 305727, 307131, 308538, 309947, 311360, 312775, 314193,
  315614, 317037, 318463, 319892, 321324, 322758, 324195, 325634, 327077, 328521,
  329969, 331418, 332871, 334326, 335783, 337243, 338705, 340170, 341637, 343106,
  344578, 346053, 347529, 349008, 350489, 351973, 353458, 354946, 356437, 357929,
  359424, 360920, 362419, 363920, 365423, 366928, 368435, 369945, 371456, 372969,
  374484, 376001, 377520, 379041, 380564, 382089, 383615, 385143, 386673, 388205,
  389739, 391274, 392811, 394350, 395890, 397432, 398975, 400521, 402067, 403615,
  405165, 406716, 408269, 409823, 411379, 412936, 414494, 416054, 417614, 419177,
  420740, 422305, 423871, 425438, 427007, 428576, 430147, 431719, 433292, 434866,
  436441, 438017, 439593, 441171, 442750, 444330, 445911, 447492, 449074, 450658,
  452242, 453826, 455412, 456998, 458585, 460172, 461760, 463349, 464938, 466528,
  468119, 469710, 471301, 472893, 474485, 476078, 477671, 479264, 480858, 482452,
  484047, 485641, 487236, 488831, 490426, 492022, 493617, 495213, 496808, 498404
};


// Input: 0-2000.
// Output: 0-1000000.
static unsigned norm2000( unsigned z )
{
  if( z < 0 || z > 2000 ) {
    bug( "Norm2000: index %u out of range.", z );
    return 0;
  }

  if( z == 1000 )
    return 500000;

  if( z > 1000 )
    return 1000000 - norm2000( 2000 - z );

  return phi_table[ z ];
}


unsigned norm2000_search( unsigned x, unsigned left, unsigned width )
{
  const unsigned tail = norm2000( left );
  const unsigned range = norm2000( left+width ) - tail;

  int min = 0;
  int max = width-1;
  int last = -1;
  
  while( true ) {
    if( max < min ) {
      if( last == -1 )
	panic( "Bad normal search" );
      return last;
    }
    
    const int mid = ( max + min ) / 2;
    const int value = width*( norm2000( mid + 1 + left ) - tail ) - x * range;
    
    if( value == 0 ) {
      return mid;
    }
    
    if( value >= 0 ) {
      last = mid;
      max = mid-1;
    } else {
      min = mid+1;
    }
  }
}
*/


void add_percent_average( int& num, const int percent )
{
  if( percent == 0 )
    return;

  num *= 100 + percent;
  const int rem = num % 100;
  num /= 100;
  if( rem > 0 && number_range( 1, 100 ) <= rem ) {
    ++num;
  }
}


/*
 *   RENUMBER
 */


bool renumber( int& value, int i, int j )
{
  if( value == i )
    value = j;
  else if( i < j ) {
    if( value > i && value <= j ) {
      --value;
      return true;
    }
  }
  else {
    if( value < i && value >= j ) {
      ++value;
      return true;
    }
  }
  
  return false;
}


/*
 *   RANDOM NUMBER ROUTINES
 */


int number_range( int from, int to )
{
  static int value;
  static int width = 0;

  register int bits, power, number;
  
  if( ( to -= from ) <= 0 )
    return from;
  
  for( bits = 1, power = 2; power <= to; bits++, power <<= 1 );
  
  do {
    if( width < bits ) {
      value = rand( );
      width = 30;
    }
    
    number = ( value & ( ( 1 << bits ) - 1 ) );
    value >>= bits;
    width -= bits;
  } while( number > to );
  
  return from+number;
}


/*
 *   DICE ROUTINES
 */


int roll_dice( int number, int size )
{
  if( size == 0 || number == 0 )
    return 0;
  else if( size == 1 )
    return number;

  int sum = 0;

  if( number > 100 )
    number = 100;

  for( int idice = 0; idice < number; ++idice )
    sum += number_range( 1, size );

  return sum;
}


void sprintf_dice( char* tmp, int value )
{
  dice_data dice = value;

  if( dice.number != 0 || dice.side != 0 ) {
    if( dice.plus != 0 ) 
      sprintf( tmp, "%dd%d+%d", dice.number, dice.side, dice.plus );
    else
      sprintf( tmp, "%dd%d", dice.number, dice.side );
  }
  else {
    sprintf( tmp, "%d", dice.plus );
  }
} 


const char *dice_string( int value )
{
  char *tmp = static_string();
  sprintf_dice( tmp, value);
  return tmp;
}


/*
 *   NUMBER WORD FUNCTIONS
 */


static const char *const number_name[] = {
  "zero", "one", "two", "three", "four", "five",
  "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen",
  "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen" }; 

static const char *const ordinal_name[] = {
  "zeroth", "first", "second", "third", "fourth", "fifth",
  "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth",
  "fourteenth", "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth" }; 

static const char *const tens_name[] = {
  "twenty", "thirty", "forty", "fifty",
  "sixty", "seventy", "eighty", "ninety" };		      

static const char *const ord_tens_name[] = {
  "twentieth", "thirtieth", "fortieth", "fiftieth",
  "sixtieth", "seventieth", "eightieth", "ninetieth" };		      


const char *number_word( int i, const char_data* ch )
{
  if( ch 
      && ch->pcdata
      && is_set( ch->pcdata->pfile->flags, PLR_NUMERIC ) ) {
    char *tmp = static_string();
    snprintf( tmp, THREE_LINES, "%d", i );
    return tmp;
  } 
  
  if( i < 0 )
    return "[BUG]";

  if( i < 20 ) 
    return number_name[i];

  if( i > 19999 )
    return "many";  

  char *tmp = static_string();
  
  if( i%1000 == 0 ) {
    snprintf( tmp, THREE_LINES, "%s thousand", number_name[i/1000] );
    return tmp;
  }

  if( i > 999 ) {
    snprintf( tmp, THREE_LINES, "%s thousand %s",
	      number_name[i/1000], number_word( i%1000 ) );
    return tmp;
  }

  if( i%100 == 0 ) {
    snprintf( tmp, THREE_LINES, "%s hundred", number_name[i/100] );
    return tmp;
  }
  
  if( i > 99 ) {
    if( i%100 < 20 ) {
      snprintf( tmp, THREE_LINES, "%s hundred %s",
		number_name[i/100],
		number_name[i%100] );
    } else {
      const ssize_t l = snprintf( tmp, THREE_LINES, "%s hundred %s",
				  number_name[i/100],
				  tens_name[(i/10)%10-2] );
      if( i%10 != 0 ) {
        snprintf( tmp+l, THREE_LINES-l, "-%s", number_name[i%10] );
      }
    }
    return tmp;
  }
  
  if( i%10 == 0 ) 
    return tens_name[i/10-2];
  
  snprintf( tmp, THREE_LINES, "%s-%s", tens_name[i/10-2], number_name[i%10] );
  return tmp;
}


const char *ordinal_word( int i, const char_data *ch )
{
  if( i < 0 )
    return "[BUG]";

  if( ch 
      && ch->pcdata
      && is_set( ch->pcdata->pfile->flags, PLR_NUMERIC ) ) {
    char *tmp = static_string();
    snprintf( tmp, THREE_LINES, "%d%s", i,
	      number_suffix( i ) );
    return tmp;
  } 
  
  if( i < 20 ) 
    return ordinal_name[i];

  if( i > 19999 ) {
    return "umpteenth";
  }

  char *tmp = static_string();

  if( i%1000 == 0 ) {
    snprintf( tmp, THREE_LINES, "%s thousandth", number_name[i/1000] );
    return tmp;
  }

  if( i > 999 ) {
    snprintf( tmp, THREE_LINES, "%s thousand %s",
	      number_name[i/1000], ordinal_word( i%1000 ) );
    return tmp;
  }

  if( i%100 == 0 ) {
    snprintf( tmp, THREE_LINES, "%s hundredth", number_name[i/100] );
    return tmp;
  }

  if( i > 99 ) {
    if( i%100 < 20 ) {
      snprintf( tmp, THREE_LINES, "%s hundred %s",
		number_name[i/100], ordinal_name[i%100] );
    } else {
      const ssize_t l = snprintf( tmp, THREE_LINES, "%s hundred %s",
				  number_name[i/100], tens_name[(i/10)%10-2] );
      if( i%10 != 0 ) {
        snprintf( tmp+l, THREE_LINES-l, "-%s", ordinal_name[i%10] );
      }
    }
    return tmp;
  }

  if( i%10 == 0 ) 
    return ord_tens_name[i/10-2];
  
  snprintf( tmp, THREE_LINES, "%s-%s", tens_name[i/10-2], ordinal_name[i%10] );
  return tmp;  
}


/*
const char* number_pos_word( int num ) 
{
  const char* data[] = { "zeroth ", "first ", "second ", "third ",
    "fourth ", "fifth ", "sixth ", "seventh ", "eighth ", "ninth " };

  if( num < 0 || num > 9 )
    return "[BUG] ";

  return data[num];
}
*/


const char* number_suffix( int num )
{
  static const char* data [] = { "st", "nd", "rd", "th" };

  num = num%100;

  if( num > 3 && num < 21 )
    return data[3];
 
  num = min( (num+9)%10, 3 );

  return data[num];
}


/*
 *   INTEGER FORMATS
 */


const char *atos( int i )
{
  char *tmp = static_string( );

  snprintf( tmp, THREE_LINES, "%d", i );

  return tmp;
}


const char *int3( int i, bool left )
{
  char *tmp = static_string( );

  if( i >= -99 && i <= 999 ) {
    if( left ) {
      snprintf( tmp, THREE_LINES, "%d", i );
    } else {
      snprintf( tmp, THREE_LINES, "%3d", i );
    }
    return tmp;
  }

  // Can't print negative beyond -9k in 3 digits.
  if( i >= 0 && i <= 99999 ) {
    if( left ) {
      snprintf( tmp, THREE_LINES, "%dk", i/1000 );
    } else {
      snprintf( tmp, THREE_LINES, "%2dk", i/1000 );
    }
    return tmp;
  }

  return "***";
}


const char *int4( int i, bool left )
{
  char *tmp = static_string( );

  if( i >= -999 && i <= 9999 ) {
    if( left ) {
      snprintf( tmp, THREE_LINES, "%d", i );
    } else {
      snprintf( tmp, THREE_LINES, "%4d", i );
    }
    return tmp;
  }

  if( i >= -99999 && i <= 999999 ) {
    if( left ) {
      snprintf( tmp, THREE_LINES, "%dk", i/1000 );
    } else {
      snprintf( tmp, THREE_LINES, "%3dk", i/1000 );
    }
    return tmp;
  }

  // Can't print negative beyond -99k in 4 digits.
  if( i >= 0 && i <= 999999999 ) {
    if( left ) {
      snprintf( tmp, THREE_LINES, "%dM", i/1000000 );
    } else {
      snprintf( tmp, THREE_LINES, "%3dM", i/1000000 );
    }
    return tmp;
  }

  return "****";
}


const char *int5( int i, bool left )
{
  char *tmp = static_string( );

  if( i >= -9999 && i <= 99999 ) {
    if( left ) {
      snprintf( tmp, THREE_LINES, "%d", i );
    } else {
      snprintf( tmp, THREE_LINES, "%5d", i );
    }
    return tmp;
  }

  if( i >= -999999 && i <= 9999999 ) {
    if( left ) {
      snprintf( tmp, THREE_LINES, "%dk", i/1000 );
    } else {
      snprintf( tmp, THREE_LINES, "%4dk", i/1000 );
    }
    return tmp;
  }

  if( i >= -999999999 && i <= 999999999 ) {
    if( left ) {
      snprintf( tmp, THREE_LINES, "%dM", i/1000000 );
    } else {
      snprintf( tmp, THREE_LINES, "%4dM", i/1000000 );
    }
    return tmp;
  }

  return "*****";
}


/*
 *   FLOAT FORMATS
 */


const char *float3( int x, bool left )
{
  char *tmp = static_string( );

  if( x < 0 || x > 99949 )
    return "***";

  if( x == 0 )
    if( left ) {
      return "0";
    } else {
      return "  0";
    }

  if( x < 100 )
    if( left ) {
      snprintf( tmp, THREE_LINES, ".%02d", x );
    } else {
      snprintf( tmp, THREE_LINES, ".%02d", x );
    }

  else if( x < 995 )
    if( left ) {
      snprintf( tmp, THREE_LINES, "%.1f", (double) x / 100.0 );
    } else {
      snprintf( tmp, THREE_LINES, "%3.1f", (double) x / 100.0 );
    }

  else
    if( left ) {
      snprintf( tmp, THREE_LINES, "%d", (x+50)/100 );
    } else {
      snprintf( tmp, THREE_LINES, "%3d", (x+50)/100 );
    }
  
  return tmp;
}



/*
 *   STRING TO RANGE ROUTINE
 */


void atorange( const char *string, int& a, int& b )
{
  for( a = 0; isdigit( *string ); string++ ) 
    a = 10*a+*string-'0';
  
  if( *string == '+' ) {
    b = -1;
    return;
  }
  
  if( *string++ != '-' ) {
    b = a;
    return;
  }

  if( !isdigit( *string ) ) {
    b = -1;
    return;
  }

  for( b = 0; isdigit( *string ); string++ ) 
    b = 10*b+*string-'0';
}


bool left_bracket( char c )
{
  return( c == '(' || c == '[' );
}


bool right_bracket( char c )
{
  return( c == ')' || c == ']' );
} 


static int close_bracket( const char *string, int left, int right )
{
  int level = 1;

  for( int i = left; i <= right; ++i ) {
    if( left_bracket( string[i] ) )
      ++level;
    if( right_bracket( string[i] ) && --level == 0 )
      return i;
  }

  return -1;
}


/*
 *   INTEGER EVALUATE
 */
 

int evaluate( const char *string, bool& error, int v1, int v2 )
{
  error = false;

  return evaluate( string, error, v1, v2, 0, strlen( string )-1 );
}


static int evaluate( const char *string, bool& error, int v1, int v2,
		     int left, int right ) 
{
  const char *const oper = "+-*/d";
  const char *const order = "11223";

  if( error ) {
    error = true;
    return 0;
  }
  
  if( left > right ) 
    return 0;

  char  priority  = '4';
  int   division  = -1;
  int       a, b;
  int       i, j;

  while( left_bracket( string[left] )
	 && close_bracket( string, left+1, right ) == right ) {
    ++left;
    --right;
  }

  if( left == right ) {
    if( string[left] == 'L' ) 
      return v1;
    if( string[left] == 'S' )
      return v2;
  }

  for( i = left; i <= right; i++ ) {
    if( left_bracket( string[i] ) ) {
      if( ( i = close_bracket( string, i+1, right ) ) == -1 ) {
        error = true;
        return 0;
      }
      continue;
    }
    for( j = 0; j < 5; j++ )
      if( string[i] == oper[j] && priority >= order[j] ) {
        division = i;
        priority = order[j];
        break;
      }
    }

  if( division == -1 ) {
    for( a = 0, i = left; i <= right; i++ ) {
      if( isdigit( string[i] ) )
        a = 10*a+string[i]-'0'; 
      else {
        error = true;
        return 0;
      }
    }
    return a;
  }
  
  a = evaluate( string, error, v1, v2, left, division-1 );
  b = evaluate( string, error, v1, v2, division+1, right );

  switch( string[division] ) {
  case '+' :  return a+b;
  case '-' :  return a-b;
  case '*' :  return a*b;
  case '/' :
    if( b == 0 ) {
      error = true;
      return 0;
    }
    return a/b;
  case 'd' :  return roll_dice( a,b );
  }
  
  bug( "Evaluate: Impossible Operator!?" );
  error = true;

  return 0;
}


/*
 *  EVALUATE USING DOUBLE PRECISION
 */

 
typedef double_complex math_func( const double_complex& );


const char* tostring( double_complex x )
{
  char* tmp = static_string( );

  if( x.imag( ) != 0 ) 
    if( x.real( ) != 0 ) 
      snprintf( tmp, THREE_LINES, "%g%+gi", x.real( ),  x.imag( ) );
    else
      snprintf( tmp, THREE_LINES, "%gi", x.imag( ) );
  else
    snprintf( tmp, THREE_LINES, "%g", x.real( ) );
   
  return tmp;
}


void do_calculate( char_data* ch, const char *argument )
{
  if( !*argument ) {
    send( ch, "What expression do you wish to evaluate?\n\r" );
    return;
  }

  bool error = false;

  const double_complex x = fevaluate( argument, error );

  if( error ) {
    send( ch, "Expression fails to evaluate.\n\r" );
    return;
  }

  send( ch, "%-s = %s\n\r", argument, tostring( x ) );
}
 

static double_complex fevaluate( const char *string, bool& error, double v1, double v2 )
{
  error = false;

  return fevaluate( string, error, v1, v2, 0, strlen( string )-1 );
}


static bool qround( double x )
{
  if( x > 0 && x < FUNC_EPSILON
      || x < 0 && x > -FUNC_EPSILON )
    return true;

  return false;
}


static double_complex fevaluate( const char *string, bool& error, double v1, double v2,
				 int left, int right ) 
{
  char          priority      = '4';
  int           division      = -1;
  int               i, j;
  const char *const  oper      = "+-*/^d";
  const char *const order      = "112234";

  if( error || left > right) {
    error = true;
    return 0;
  }

  /* Skip whitespace */
  while( isspace(string[left]) && left < right ) ++left;
  while( isspace(string[right]) && left < right ) --right;

  while( left_bracket( string[left] )
    && close_bracket( string, left+1, right ) == right ) {
    ++left;
    --right;
  }

#define NFUNC 5

  const char *const  funct_name  [ NFUNC ]  = { "sin", "cos", "sqrt", "exp", "log" };
  math_func *const funct_call  [ NFUNC ]  = { sin, cos, sqrt, exp, log };
  for( i = 0; i < NFUNC; ++i ) { 
    j = strlen( funct_name[i] );
    if( !strncasecmp( string+left, funct_name[i], j ) 
	&& left_bracket( string[left+j] )
	&& right_bracket( string[right] ) 
	&& close_bracket( string, left+j+1, right ) == right ) { 
      const double_complex a = fevaluate( string, error, v1, v2, left+j+1, right-1 );
      double_complex x = ( *funct_call[i] )( a );
      if( qround( x.real( ) ) )
	x -= x.real( );
      if( qround( x.imag( ) ) )
	x = x.real( );
      return x;
    }
  }

#undef NFUNC

#define NVAR 3

  const char *const var_name [ NVAR ]  = { "pi", "e", "i" };
  const double_complex  var_value  [ NVAR ] = {
    M_PI, M_E, double_complex( 0.0, 1.0 ) };

  for( i = 0; i < NVAR; ++i ) { 
    j = strlen( var_name[i] );
    if( j == right-left+1
      && !strncasecmp( string+left, var_name[i], j ) )
      return var_value[i];
  }

#undef NVAR

  if( left == right ) {
    if( string[left] == 'L' ) 
      return v1;
    if( string[left] == 'S' )
      return v2;
  }

  for( i = left; i <= right; ++i ) {
    if( left_bracket( string[i] ) ) {
      if( ( i = close_bracket( string, i+1, right ) ) == -1 ) {
        error = true;
        return 0;
      }
      continue;
    }
    for( j = 0; oper[j]; ++j ) {
      if( string[i] == oper[j] && priority >= order[j] ) {
        division = i;
        priority = order[j];
        break;
      }
    }
  }


  if( division == -1 ) {
    double k = 0.0, j = 0.0;
    for( i = left; i <= right; ++i ) {
      if( isdigit( string[i] ) ) {
        k = 10.0*k+(string[i]-'0');
        j *= 10.0;
      } else if( string[i] == '.' && j == 0.0 ) {
        j = 1.0;
      } else {
        error = true;
        return 0;
      }
    }
    if( j < 1.0 )
      j = 1.0;
    return ((double)k)/j;
  }

  const double_complex a = fevaluate( string, error, v1, v2, left, division-1 );
  const double_complex b = fevaluate( string, error, v1, v2, division+1, right );

  switch( string[division] ) {
  case '+' :  return a+b;
  case '-' :  return a-b;
  case '*' :  return a*b;
  case '^' :  return pow( a,b );
  case '/' :  return a/b;
  case 'd' :  return roll_dice( (int)a.real(),(int)b.real() );
  }

  bug( "Evaluate: Impossible Operator!?" );
  error = true;

  return 0;
}
